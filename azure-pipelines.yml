trigger:
- master

variables:
  releaseBranchName: 'master'
  tag: '$(Build.BuildId)'
  
stages:
- stage: 'Build'
  displayName: 'Build and Push Image'
  jobs:
  - job: 'Build_and_Push_Image'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: Docker@2
      displayName: 'docker build & docker push'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: 'maximiano86/flask'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'docker registry'
        tags: |
          $(tag)

    - publish: './manifests'
      artifact: manifests

- stage: 'Deploy_Dev'
  displayName: 'Deploy Dev Environment'
  dependsOn: 'Build'
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )

  jobs:
  - job: Provision
    #displayName: 'Provision Azure App Service'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - scripts: |
        set -e
        terraform init 
        terraform plan
    name: 'RunTerraform'
    displayName: 'Run Terraform'
    env:
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
  - deployment: 'Deploy'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'ibmcloud_cluster'
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: manifests
            - task: KubernetesManifest@0
              displayName: 'Deploy to Kubernetes cluster'
              inputs:
                action: deploy
                kubernetesServiceConnection: 'ibmcloud kubernetes'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                containers: |
                  maximiano86/flask:$(tag)
